# .github/workflows/native-rust.yml
name: native-rust
on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-test-smoke:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      # Make your repo importable as a package (append to existing PYTHONPATH)
      - name: "Export PYTHONPATH"
        run: echo "PYTHONPATH=$GITHUB_WORKSPACE:$PYTHONPATH" >> "$GITHUB_ENV"

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      # Ensure Rust is available for pyo3 builds
      - name: "Install Rust toolchain"
        uses: dtolnay/rust-toolchain@stable

      - name: "Install Python deps"
        run: |
          python -m pip install --upgrade pip
          pip install maturin numpy jsonschema pyyaml

      # Build a wheel and pip install it (system site)
      - name: "Build + install native wheel"
        working-directory: hu_solver/native
        run: |
          maturin build --release -i python3.11 --out dist
          pip install --force-reinstall dist/*.whl
          python - <<'PY'
          import hu_solver_native, sys
          print("Built:", hu_solver_native.__name__)
          print("Location:", hu_solver_native.__file__)
          PY

      - name: "Sanity: show layout and importability"
        run: |
          pwd
          ls -R
          python - <<'PY'
          import os, sys, importlib.util
          print("cwd:", os.getcwd())
          print("sys.path[0]:", sys.path[0])
          print("hu_solver dir exists?", os.path.isdir("hu_solver"))
          print("tests exist?", os.path.isdir("hu_solver/tests"))
          print("find_spec('hu_solver'):", importlib.util.find_spec("hu_solver"))
          print("find_spec('hu_solver.tests.test_determinism'):", importlib.util.find_spec("hu_solver.tests.test_determinism"))
          PY

      - name: "Run unit tests"
        run: |
          python -m unittest discover -v -s hu_solver/tests

      # Optional smoke training (uncomment later when Solver + config exist)
      # - name: "Produce smoke policy"
      #   run: |
      #     python - <<'PY'
      #     from hu_solver.solver import Solver
      #     s = Solver("hu_solver/configs/hu_100bb.yaml")
      #     s.train(iters=200_000, out_dir="policies/hu_100bb_v1_smoke")
      #     PY
      # - name: "Upload smoke artifacts"
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: hu_100bb_v1_smoke
      #     path: policies/hu_100bb_v1_smoke/**
